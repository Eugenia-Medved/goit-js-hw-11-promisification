{"version":3,"sources":["webpack:///./index.js","webpack:///./js/hw11part2task2.js","webpack:///./js/hw11part2task3.js","webpack:///./js/hw11part2task1.js"],"names":["users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","Promise","resolve","logger","console","table","then","makeTransaction","transaction","delay","min","max","Math","floor","random","reject","setTimeout","id","time","logSuccess","log","logError","warn","amount","catch","ms"],"mappings":"kHAAA,gD,mBCAA,MAAMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KACjC,MAAMC,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG/D,OAAOC,QAAQC,QAAQJ,IAGnBK,EAASL,GAAgBM,QAAQC,MAAMP,GAW7CH,EAAgBH,EAAO,SAASc,KAAKH,GACrCR,EAAgBH,EAAO,OAAOc,KAAKH,I,mBC3BnC,MAIMI,EAAkBC,IACtB,MAAMC,GAL2BC,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAOtC,OAAO,IAAIV,QAAQ,CAACC,EAASa,KAC3BC,WAAW,KACUJ,KAAKE,SAAW,GAGjCZ,EAAQ,CAAEe,GAAIT,EAAYS,GAAIC,KAAMT,IAEpCM,EAAOP,EAAYS,KAEpBR,MAMDU,EAAa,EAAGF,KAAIC,WACxBd,QAAQgB,IAAK,eAAcH,kBAAmBC,QAG1CG,EAAWJ,IACfb,QAAQkB,KAAM,gCAA+BL,+BAM/CV,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAAOjB,KAAKa,GAAYK,MAAMH,GAEhEd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAAOjB,KAAKa,GAAYK,MAAMH,GAEhEd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,KAAMjB,KAAKa,GAAYK,MAAMH,GAE/Dd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAAOjB,KAAKa,GAAYK,MAAMH,I,mBCvChE,MAAMZ,EAAQgB,GAEL,IAAIxB,QAAQ,CAACC,EAASa,KAC3BC,WAAW,KACTd,EAAQuB,GAERV,EAAO,UACNU,KAIDtB,EAASe,GAAQd,QAAQgB,IAAK,kBAAiBF,OAGrDT,EAAM,KAAMH,KAAKH,GACjBM,EAAM,KAAMH,KAAKH,GACjBM,EAAM,MAAMH,KAAKH,K","file":"main.0fffc80ecfc5c9ae9eea.js","sourcesContent":["import './styles.css';\r\nimport './js/hw11part2task1';\r\nimport './js/hw11part2task2';\r\nimport './js/hw11part2task3';\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\n// console.log(delay);\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n","const delay = ms => {\r\n  // Твой код\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n\r\n      reject('❌ Упс');\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n"],"sourceRoot":""}